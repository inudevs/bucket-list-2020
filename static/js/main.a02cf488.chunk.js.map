{"version":3,"sources":["assets/achieved.png","utils/useConstant.tsx","Header.tsx","Bucket.tsx","Button.tsx","Footer.tsx","App.tsx","serviceWorker.tsx","index.tsx"],"names":["module","exports","useConstant","builder","useMemo","Header","HeaderContainer","styled","div","Organization","h2","Title","h1","Description","p","Bucket","name","desc","tags","achieved","BucketContainer","TagList","Tag","Name","AchievedBadge","img","map","tag","src","achievedImage","Button","children","onClick","ButtonContainer","button","Footer","FooterContainer","footer","a","List","ul","Item","linkData","item","href","target","rel","className","icon","onClickButton","window","open","Boolean","location","hostname","match","ReactDOM","render","AppContainer","Content","bucketData","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a02cf488.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/achieved.808381d3.png\";","import { useMemo } from 'react';\n\nexport default function useConstant<A>(builder: () => A): A {\n  return useMemo<any>(builder, []);\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport useConstant from './utils/useConstant';\n\nexport default function Header() {\n  const HeaderContainer = useConstant(() => styled.div`\n    margin: 2.2rem 0;\n    text-align: center;\n  `);\n  const Organization = useConstant(() => styled.h2`\n    font-size: 1.2rem;\n    font-weight: 700;\n\n    @media (max-width: 550px) {\n      font-size: 1.1rem;\n    }\n  `);\n  const Title = useConstant(() => styled.h1`\n    font-family: \"Merriweather\", serif;\n    font-size: 3.8rem;\n    text-transform: uppercase;\n\n    @media (max-width: 550px) {\n      font-size: 3rem;\n    }\n\n    @media (max-width: 400px) {\n      font-size: 2.2rem;\n    }\n  `);\n  const Description = useConstant(() => styled.p`\n    margin-top: 0.3rem;\n  `);\n\n  return (\n    <HeaderContainer>\n      <Organization>INU: 이루고, 누리다.</Organization>\n      <Title>Bucket List</Title>\n      <Description>2020년, 이런 동아리를 만들어 나갈 거예요!</Description>\n    </HeaderContainer>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport useConstant from './utils/useConstant';\n\nimport achievedImage from './assets/achieved.png';\n\ninterface BucketProps {\n  name?: string;\n  desc?: string;\n  tags?: Array<string>;\n  achieved?: boolean;\n};\n\nconst Bucket: React.SFC<BucketProps> = ({\n  name = '',\n  desc = '',\n  tags = [],\n  achieved = false,\n}) => {\n  const BucketContainer = useConstant(() => styled.div`\n    flex: 0 0 30%;\n    margin-bottom: 1.5rem;\n    padding-bottom: 0.5rem;\n    position: relative;\n\n    @media (max-width: 560px) {\n      flex: 0 0 100%;\n    }\n  `);\n  const TagList = useConstant(() => styled.div`\n    margin-bottom: 0.2rem;\n  `);\n  const Tag = useConstant(() => styled.div`\n    display: inline-block;\n    font-weight: 300;\n  `);\n  const Name = useConstant(() => styled.h1`\n    font-size: 1.1rem;\n    font-weight: 700;\n    margin-bottom: 0.3rem;\n    word-break: keep-all;\n  `);\n  const Description = useConstant(() => styled.p`\n    font-size: 0.8rem;\n    font-weight: 400;\n    word-break: keep-all;\n  `);\n  const AchievedBadge = useConstant(() => styled.img`\n    width: 108px;\n    height: 108px;\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    filter: opacity(0.7);\n    z-index: -1;\n    user-select: none;\n    -webkit-user-drag: none;\n  `);\n\n  return (\n    <BucketContainer>\n      <TagList>\n        {tags.map((tag) => (\n          <Tag>{`#${tag}`}</Tag>\n        ))}\n      </TagList>\n      <Name>{name}</Name>\n      <Description>{desc}</Description>\n      {achieved && <AchievedBadge\n        src={achievedImage}\n      />}\n    </BucketContainer>\n  );\n}\n\nexport default Bucket;\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nimport useConstant from './utils/useConstant';\n\ninterface ButtonProps {\n  children: ReactNode;\n  onClick?: () => void;\n};\n\nconst Button: React.SFC<ButtonProps> = ({ children, onClick = () => {} }) => {\n  const ButtonContainer = useConstant(() => styled.button`\n    border: 1px solid rgba(0, 0, 0, 0.5);\n    border-radius: 25px;\n    color: rgba(0, 0, 0, 0.5);\n    cursor: pointer;\n    display: flex;\n    font-size: 1.1rem;\n    font-weight: 700;\n    padding: 0.7rem 1.5rem;\n    transition: all 0.2s linear;\n    width: fit-content;\n\n    &:focus {\n      outline: none;\n    }\n  `);\n\n  return (\n    <ButtonContainer onClick={onClick}>\n      {children}\n    </ButtonContainer>\n  );\n}\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport linkData from './data/link.json';\n\nimport useConstant from './utils/useConstant';\n\nexport default function Footer() {\n  function ItemList() {\n    const List = useConstant(() => styled.ul`\n      display: flex;\n      justify-content: center;\n      list-style: none;\n    `);\n    const Item = useConstant(() => styled.a`\n      color: rgba(0, 0, 0, 0.3);\n      font-size: 2.2rem;\n      margin-left: 0.5rem;\n      transition: color 0.3s linear;\n\n      &:first-child {\n        margin-left: 0;\n      }\n\n      &:hover,\n      &:focus {\n        color: black;\n      }\n    `);\n\n    return (\n      <List>\n        {linkData.map((item) => (\n          <Item\n            href={item.href}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <i className={`fab ${item.icon}`} />\n          </Item>\n        ))}\n      </List>\n    );\n  }\n\n  const FooterContainer = useConstant(() => styled.footer`\n    align-items: center;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin: 2.2rem 0;\n    width: 100%;\n  `);\n  const Description = useConstant(() => styled.a`\n    color: rgba(0, 0, 0, 0.3);\n    font-size: 0.9rem;\n    transition: color 0.3s linear;\n\n    &:hover,\n    &:focus {\n      color: rgba(0, 0, 0, 0.5);\n    }\n  `);\n\n  return (\n    <FooterContainer>\n      <ItemList />\n      <Description\n        href=\"https://inudevs.com\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        INU와 함께 새로운 도전을 해 나갈 팀원을 찾습니다.\n      </Description>\n    </FooterContainer>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport Header from './Header';\nimport Bucket from './Bucket';\nimport Button from './Button';\nimport Footer from './Footer';\n\nimport bucketData from './data/bucket.json';\n\nimport useConstant from './utils/useConstant';\n\nconst onClickButton = () => {\n  // eslint-disable-next-line no-alert\n  window.open('https://circle.dimigo.in/');\n};\n\nexport default function App() {\n  const AppContainer = useConstant(() => styled.div`\n    display: flex;\n    flex-direction: column;\n  `);\n\n  const Content = useConstant(() => styled.div`\n    align-items: center;\n    display: flex;\n    flex-direction: column;\n    margin: auto;\n    width: 80%;\n\n    @media (max-width: 400px) {\n      width: 90%;\n    }\n  `);\n\n  const List = useConstant(() => styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    margin-bottom: 2rem;\n\n    @media (max-width: 820px) {\n      width: 90%;\n    }\n\n    @media (max-width: 600px) {\n      width: 100%;\n    }\n  `);\n\n  return (\n    <AppContainer>\n      <Header />\n      <Content>\n        <List>\n          {bucketData.map(({ name, desc, tags, achieved = false }) => (\n            <Bucket\n              name={name}\n              desc={desc}\n              tags={tags}\n              achieved={achieved}\n            />\n          ))}\n        </List>\n        <Button onClick={onClickButton}>\n          함께 이루어 나가기\n        </Button>\n      </Content>\n      <Footer />\n    </AppContainer>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/Index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}